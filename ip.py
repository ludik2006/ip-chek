from flask import Flask, request, render_template_string
import requests
from datetime import datetime
import re

app = Flask(__name__)

def get_ip_data(ip):
    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json", timeout=5)
        return response.json()
    except:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>–¢–æ—á–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 15px;
            line-height: 1.6;
        }
        .info-block {
            background: #f5f5f5;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 15px;
        }
        button {
            background: #4285f4;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 16px;
            width: 100%;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        #map {
            height: 250px;
            width: 100%;
            border-radius: 12px;
            margin-top: 15px;
            border: 1px solid #ddd;
        }
        .accuracy {
            display: inline-block;
            padding: 3px 8px;
            background: #4285f4;
            color: white;
            border-radius: 10px;
            font-size: 12px;
        }
        .loading {
            display: none;
            text-align: center;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="info-block">
        <h2>üìç –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
        <p><strong>IP:</strong> {{ ip }}</p>
        <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ø–æ IP):</strong> {{ city }}, {{ country }}</p>
    </div>

    <button onclick="getPreciseLocation()">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</button>
    
    <div id="loading" class="loading">
        <p>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...</p>
    </div>
    
    <div id="geoResult" class="info-block" style="display:none;">
        <h2>üó∫ –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</h2>
        <div id="positionData"></div>
        <div id="addressData"></div>
        <div id="map"></div>
    </div>

    <script>
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        function getPreciseLocation() {
            const loading = document.getElementById('loading');
            const resultBlock = document.getElementById('geoResult');
            
            loading.style.display = 'block';
            resultBlock.style.display = 'none';
            
            if (!navigator.geolocation) {
                showError("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é");
                return;
            }

            const options = {
                enableHighAccuracy: true,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º GPS –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                timeout: 10000,           // 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
                maximumAge: 0             // –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            };

            navigator.geolocation.getCurrentPosition(
                position => {
                    loading.style.display = 'none';
                    resultBlock.style.display = 'block';
                    showPrecisePosition(position);
                },
                error => {
                    loading.style.display = 'none';
                    handleGeolocationError(error);
                },
                options
            );
        }

        function showPrecisePosition(position) {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;
            const acc = position.coords.accuracy;
            
            document.getElementById('positionData').innerHTML = `
                <p><strong>–®–∏—Ä–æ—Ç–∞:</strong> ${lat.toFixed(6)}</p>
                <p><strong>–î–æ–ª–≥–æ—Ç–∞:</strong> ${lon.toFixed(6)}</p>
                <p><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> <span class="accuracy">¬±${Math.round(acc)} –º–µ—Ç—Ä–æ–≤</span></p>
            `;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Mapbox –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            showMapboxMap(lat, lon);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
            getReverseGeocoding(lat, lon);
        }

        function showMapboxMap(lat, lon) {
            // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 50,000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)
            const mapboxToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';
            
            document.getElementById('map').innerHTML = `
                <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    scrolling="no"
                    marginheight="0"
                    marginwidth="0"
                    src="https://api.mapbox.com/styles/v1/mapbox/streets-v11.html?title=false&access_token=${mapboxToken}&zoom=15&center=${lon},${lat}&marker=${lon},${lat}"
                ></iframe>
            `;
        }

        function getReverseGeocoding(lat, lon) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenStreetMap Nominatim API
            fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}`)
                .then(response => response.json())
                .then(data => {
                    const address = data.address || {};
                    let addressStr = '';
                    
                    if (address.road) addressStr += `${address.road}`;
                    if (address.house_number) addressStr += `, ${address.house_number}`;
                    if (addressStr === '') addressStr = '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω';
                    
                    document.getElementById('addressData').innerHTML = `
                        <p><strong>–ü—Ä–∏–º–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å:</strong> ${addressStr}</p>
                        ${address.city ? `<p><strong>–ì–æ—Ä–æ–¥:</strong> ${address.city}</p>` : ''}
                        ${address.country ? `<p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> ${address.country}</p>` : ''}
                    `;
                })
                .catch(() => {
                    document.getElementById('addressData').innerHTML = 
                        '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å</p>';
                });
        }

        function handleGeolocationError(error) {
            let message;
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    message = "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.";
                    break;
                case error.POSITION_UNAVAILABLE:
                    message = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ GPS.";
                    break;
                case error.TIMEOUT:
                    message = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GPS –≤–∫–ª—é—á—ë–Ω.";
                    break;
                default:
                    message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.";
            }
            alert(message);
        }
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    geo = get_ip_data(ip)
    
    return render_template_string(HTML_TEMPLATE,
        ip=ip,
        country=geo.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        city=geo.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    )

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
