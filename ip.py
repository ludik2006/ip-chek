from flask import Flask, request, render_template_string, make_response
import requests
from datetime import datetime
import re
import json

app = Flask(__name__)

# –ö—ç—à –¥–ª—è IP-–¥–∞–Ω–Ω—ã—Ö
ip_cache = {}
COOKIE_CONSENT = "cookie_consent"

def get_ip_data(ip):
    if ip in ip_cache:
        return ip_cache[ip]

    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json", timeout=5)
        geo = response.json()
        data = {
            "country": geo.get("country", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "city": geo.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "isp": geo.get("org", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        }
        ip_cache[ip] = data
        return data
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ IPAPI]: {e}")
        return {"country": "–û—à–∏–±–∫–∞", "city": "–û—à–∏–±–∫–∞", "isp": "–û—à–∏–±–∫–∞"}

def parse_user_agent(user_agent):
    os_patterns = {
        'Windows 11': r'Windows NT 10.0; Win64; x64',
        'Windows 10': r'Windows NT 10.0',
        'Linux': r'Linux',
        'Android': r'Android',
        'iOS': r'iPhone|iPad|iPod',
        'Mac OS X': r'Macintosh'
    }

    browser_patterns = {
        'Chrome': r'Chrome',
        'Firefox': r'Firefox',
        'Safari': r'Safari',
        'Edge': r'Edg'
    }

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
    os = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    for name, pattern in os_patterns.items():
        if re.search(pattern, user_agent):
            os = name
            break

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    for name, pattern in browser_patterns.items():
        if re.search(pattern, user_agent):
            browser = name
            break

    # –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device = "–°–º–∞—Ä—Ç—Ñ–æ–Ω/–ü–ª–∞–Ω—à–µ—Ç" if ('Mobile' in user_agent or 'Android' in user_agent or 'iPhone' in user_agent) else "–ö–æ–º–ø—å—é—Ç–µ—Ä"

    return os, browser, device

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</title>
    <style>
        body { 
            background-color: #111; 
            color: #00FF88; 
            font-family: Arial; 
            margin: 0; 
            padding: 0;
        }
        .container { 
            background-color: rgba(0, 0, 0, 0.7); 
            border-radius: 10px; 
            padding: 20px; 
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.6); 
            max-width: 800px; 
            margin: 20px auto;
        }
        h1 { text-align: center; }
        .info-block { 
            margin: 15px 0; 
            padding: 10px; 
            border-bottom: 1px solid #333; 
        }
        .warning { color: #FF5555; }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
        #consentModal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            color: white;
            text-align: center;
        }
        .consent-box {
            background-color: #222;
            padding: 30px;
            border-radius: 10px;
            max-width: 600px;
        }
        .consent-buttons {
            margin-top: 20px;
        }
        .consent-btn {
            padding: 10px 20px;
            margin: 0 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .accept-btn {
            background-color: #00AA00;
            color: white;
        }
        .reject-btn {
            background-color: #AA0000;
            color: white;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É–∫–∏ */
        #cookieNotice {
            position: fixed;
            top: 20px;
            left: 20px;
            background-color: #333;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
            z-index: 1001;
            display: none;
        }
    </style>
</head>
<body>
    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–≥–ª–∞—Å–∏—è -->
    <div id="consentModal">
        <div class="consent-box">
            <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
            <p>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cookies –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.</p>
            <p>–ù–∞–∂–∏–º–∞—è "–ü—Ä–∏–Ω—è—Ç—å", –≤—ã —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ –Ω–∞–º —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏.</p>
            <div class="consent-buttons">
                <button class="consent-btn accept-btn" onclick="acceptConsent()">–ü—Ä–∏–Ω—è—Ç—å</button>
                <button class="consent-btn reject-btn" onclick="rejectConsent()">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
            </div>
        </div>
    </div>

    <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—É–∫–∏ -->
    <div id="cookieNotice">
        <p>–†–∞–∑—Ä–µ—à–∞–µ—Ç–µ –ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cookie-—Ñ–∞–π–ª–æ–≤?</p>
        <button onclick="confirmCookies()">–†–∞–∑—Ä–µ—à–∏—Ç—å</button>
        <button onclick="hideCookieNotice()">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
    </div>

    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å–∫—Ä—ã—Ç –¥–æ —Å–æ–≥–ª–∞—Å–∏—è) -->
    <div id="mainContent" style="display: none;">
        <div class="container">
            <h1>üîç –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</h1>
            
            <div class="info-block">
                <h2>üåç –°–µ—Ç—å –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h2>
                <p><strong>IP:</strong> {{ ip }}</p>
                <p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> {{ country }}</p>
                <p><strong>–ì–æ—Ä–æ–¥:</strong> {{ city }}</p>
                <p><strong>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</strong> {{ isp }}</p>
                <div id="gpsData" style="display: none;">
                    <p><strong>–¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> <span id="coordinates"></span></p>
                    <p><strong>–ê–¥—Ä–µ—Å:</strong> <span id="address"></span></p>
                    <div id="map" style="height: 300px; margin-top: 15px;"></div>
                </div>
            </div>

            <div class="info-block">
                <h2>üíª –°–∏—Å—Ç–µ–º–∞</h2>
                <p><strong>–û–°:</strong> <span id="os">{{ os }}</span></p>
                <p><strong>–ë—Ä–∞—É–∑–µ—Ä:</strong> <span id="browser">{{ browser }}</span></p>
                <p><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> <span id="device">{{ device }}</span></p>
                <p><strong>–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã:</strong> <span id="cpuCores"></span> <span id="cpuWarning" class="warning"></span></p>
                <p><strong>GPU:</strong> <span id="gpu"></span></p>
            </div>

            <div class="info-block">
                <h2>üñ•Ô∏è –≠–∫—Ä–∞–Ω</h2>
                <p><strong>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</strong> <span id="screenResolution"></span></p>
                <p><strong>–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞:</strong> <span id="colorDepth"></span></p>
            </div>

            <div class="info-block">
                <h2>üîã –ë–∞—Ç–∞—Ä–µ—è</h2>
                <p><strong>–ó–∞—Ä—è–¥:</strong> <span id="batteryLevel"></span> <span id="batteryWarning" class="warning"></span></p>
                <p><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> <span id="batteryCharging"></span></p>
            </div>

            <div class="info-block">
                <h2>üîå WebRTC (–ª–æ–∫–∞–ª—å–Ω—ã–π IP)</h2>
                <p><strong>–õ–æ–∫–∞–ª—å–Ω—ã–π IP:</strong> <span id="webrtcIp">–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...</span></p>
            </div>

            <div class="info-block">
                <h2>üñãÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã</h2>
                <p><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã:</strong> <span id="installedFonts">–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...</span></p>
            </div>

            <div class="info-block">
                <h2>üñêÔ∏è –¶–∏—Ñ—Ä–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫</h2>
                <p><strong>Canvas Fingerprint:</strong> <span id="fingerprint"></span></p>
            </div>

            <div class="info-block warning">
                <h2>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</h2>
                <p>–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª–∏ –∂–µ—Ä—Ç–≤–æ–π —É—á–µ–±–Ω–æ–π —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π –∞—Ç–∞–∫–∏. –ù–∞–∂–∞–≤ "–ü—Ä–∏–Ω—è—Ç—å", –≤—ã –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.</p>
                <p><strong>–£—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</strong> –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ, –∫–æ–º—É –≤—ã –¥–∞—ë—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!</p>
                <button onclick="deleteMyData()" style="background: #ff9800; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">–£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ</button>
            </div>
        </div>
    </div>

    <script>
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–µ
        function checkConsent() {
            return document.cookie.includes("{{ COOKIE_CONSENT }}=true");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è
        if (!checkConsent()) {
            document.getElementById('consentModal').style.display = 'flex';
        } else {
            document.getElementById('mainContent').style.display = 'block';
            loadAllData();
        }

        function acceptConsent() {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π
            const date = new Date();
            date.setTime(date.getTime() + (30 * 24 * 60 * 60 * 1000));
            document.cookie = "{{ COOKIE_CONSENT }}=true; expires=" + date.toUTCString() + "; path=/";
            
            document.getElementById('consentModal').style.display = 'none';
            document.getElementById('mainContent').style.display = 'block';
            document.getElementById('cookieNotice').style.display = 'block';
        }

        function rejectConsent() {
            window.location.href = "https://www.google.com";
        }

        function confirmCookies() {
            document.getElementById('cookieNotice').style.display = 'none';
            loadAllData();
        }

        function hideCookieNotice() {
            document.getElementById('cookieNotice').style.display = 'none';
        }

        function loadAllData() {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            getCPUInfo();
            getGPUInfo();
            getScreenInfo();
            getBatteryInfo();
            getWebRTCIP();
            getFonts();
            getFingerprint();
            getLocation();
        }

        function getCPUInfo() {
            const cores = navigator.hardwareConcurrency;
            let warning = "";
            
            if (/Android|iPhone|iPad/i.test(navigator.userAgent)) {
                warning = " (–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç–µ—Ä—ã)";
            }
            else if (cores >= 8) {
                warning = " (–≤–æ–∑–º–æ–∂–Ω–æ, —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Performance-—è–¥—Ä–∞)";
            }
            
            document.getElementById('cpuCores').textContent = cores || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            document.getElementById('cpuWarning').textContent = warning;
        }

        function getGPUInfo() {
            if (navigator.gpu) {
                navigator.gpu.requestAdapter()
                    .then(adapter => {
                        const info = adapter.info || {};
                        document.getElementById('gpu').textContent = 
                            info.description || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                    })
                    .catch(() => {
                        document.getElementById('gpu').textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å";
                    });
            } else {
                document.getElementById('gpu').textContent = "API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è";
            }
        }

        function getScreenInfo() {
            document.getElementById('screenResolution').textContent = 
                window.screen.width + "x" + window.screen.height;
            document.getElementById('colorDepth').textContent = 
                window.screen.colorDepth + " –±–∏—Ç";
        }

        function getBatteryInfo() {
            if ('getBattery' in navigator) {
                navigator.getBattery()
                    .then(battery => {
                        document.getElementById('batteryLevel').textContent = 
                            Math.round(battery.level * 100) + "%";
                        document.getElementById('batteryCharging').textContent = 
                            battery.charging ? "–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è" : "–ù–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è";
                    })
                    .catch(() => {
                        showBatteryWarning();
                    });
            } else {
                showBatteryWarning();
            }
        }

        function showBatteryWarning() {
            document.getElementById('batteryLevel').textContent = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
            document.getElementById('batteryWarning').textContent = 
                " (—Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)";
        }

        function getWebRTCIP() {
            const rtc = new RTCPeerConnection({ 
                iceServers: [{ urls: "stun:stun.l.google.com:19302" }] 
            });
            rtc.createDataChannel("");
            rtc.onicecandidate = e => {
                if (e.candidate) {
                    const ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3})/;
                    const ipMatch = e.candidate.candidate.match(ipRegex);
                    if (ipMatch) {
                        document.getElementById('webrtcIp').textContent = ipMatch[1];
                        rtc.close();
                    }
                }
            };
            rtc.createOffer().then(offer => rtc.setLocalDescription(offer));
        }

        function getFonts() {
            const fonts = ["Arial", "Times New Roman", "Courier New", "Verdana", "Georgia"];
            const availableFonts = [];
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            
            fonts.forEach(font => {
                context.font = `12px "${font}"`;
                if (context.measureText("test").width > 0) availableFonts.push(font);
            });
            document.getElementById('installedFonts').textContent = 
                availableFonts.join(", ") || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        }

        function getFingerprint() {
            const fingerprintCanvas = document.createElement("canvas");
            const fingerprintCtx = fingerprintCanvas.getContext("2d");
            fingerprintCtx.fillStyle = "rgb(128, 0, 128)";
            fingerprintCtx.fillRect(0, 0, 100, 50);
            fingerprintCtx.fillStyle = "rgb(255, 255, 0)";
            fingerprintCtx.font = "18px Arial";
            fingerprintCtx.fillText("Fingerprint", 10, 30);
            document.getElementById('fingerprint').textContent = 
                fingerprintCanvas.toDataURL().slice(-32);
        }

        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    position => {
                        const lat = position.coords.latitude;
                        const lon = position.coords.longitude;
                        const acc = position.coords.accuracy;
                        
                        document.getElementById('coordinates').textContent = 
                            `${lat.toFixed(6)}, ${lon.toFixed(6)} (—Ç–æ—á–Ω–æ—Å—Ç—å: ¬±${Math.round(acc)} –º)`;
                        
                        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
                        fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`)
                            .then(response => response.json())
                            .then(data => {
                                const address = data.address || {};
                                document.getElementById('address').textContent = 
                                    `${address.road || ''} ${address.house_number || ''}, ${address.city || address.town || address.village || ''}`;
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
                                showMap(lat, lon);
                            });
                        
                        document.getElementById('gpsData').style.display = 'block';
                    },
                    error => {
                        console.error("–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
                    },
                    { enableHighAccuracy: true }
                );
            }
        }

        function showMap(lat, lon) {
            document.getElementById('map').innerHTML = `
                <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    scrolling="no"
                    marginheight="0"
                    marginwidth="0"
                    src="https://www.openstreetmap.org/export/embed.html?bbox=${lon-0.01}%2C${lat-0.01}%2C${lon+0.01}%2C${lat+0.01}&amp;layer=mapnik&amp;marker=${lat}%2C${lon}"
                ></iframe>`;
        }

        function deleteMyData() {
            fetch('/delete-data', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!");
                } else {
                    alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
                }
            });
        }
    </script>
</body>
</html>
"""

@app.route('/')
def show_ip():
    consent = request.cookies.get(COOKIE_CONSENT)
    if not consent:
        return render_template_string(HTML_TEMPLATE, COOKIE_CONSENT=COOKIE_CONSENT)

    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    user_agent = request.headers.get('User-Agent', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    os, browser, device = parse_user_agent(user_agent)
    geo = get_ip_data(ip)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    log_entry = {
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "ip": ip,
        "country": geo['country'],
        "city": geo['city'],
        "isp": geo['isp'],
        "os": os,
        "browser": browser,
        "device": device,
        "user_agent": user_agent
    }
    
    with open("user_logs.json", "a") as f:
        f.write(json.dumps(log_entry) + "\n")
    
    return render_template_string(HTML_TEMPLATE,
                                ip=ip,
                                country=geo['country'],
                                city=geo['city'],
                                isp=geo['isp'],
                                os=os,
                                browser=browser,
                                device=device,
                                COOKIE_CONSENT=COOKIE_CONSENT)

@app.route('/delete-data', methods=['POST'])
def delete_data():
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
        with open("user_logs.json", "r") as f:
            logs = [json.loads(line) for line in f.readlines() if line.strip()]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏, —É–¥–∞–ª—è—è –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–∫—É—â–∏–º IP
        new_logs = [log for log in logs if log.get('ip') != ip]
        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open("user_logs.json", "w") as f:
            for log in new_logs:
                f.write(json.dumps(log) + "\n")
        
        return {'success': True}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {'success': False}, 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5050, debug=True)
