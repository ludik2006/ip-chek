from flask import Flask, request, render_template_string, make_response
import requests
from datetime import datetime
import re
import os
import json

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_FILE = "user_data.log"  # –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
COOKIE_NAME = "user_consent"

def init_log_file():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, 'w', encoding='utf-8') as f:
            f.write("")  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª

def get_ip_data(ip):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ IP"""
    if not ip or ip.startswith(('127.', '10.', '192.168.', '172.')):
        return {"country": "–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å", "city": "–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å", "org": "–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å"}
    
    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json", timeout=5)
        return response.json() if response.status_code == 200 else {}
    except Exception:
        return {}

def parse_user_agent(user_agent):
    """–ê–Ω–∞–ª–∏–∑ User-Agent"""
    user_agent = user_agent or ""
    os_info = browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
    os_patterns = [
        ('Windows 11', r'Windows NT 10.0; Win64; x64'),
        ('Windows 10', r'Windows NT 10.0'),
        ('Linux', r'Linux'),
        ('Android', r'Android'),
        ('iOS', r'iPhone|iPad|iPod'),
        ('Mac OS X', r'Macintosh')
    ]
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    browser_patterns = [
        ('Chrome', r'Chrome|CriOS'),
        ('Firefox', r'Firefox|FxiOS'),
        ('Safari', r'Safari'),
        ('Edge', r'Edg'),
        ('Opera', r'Opera|OPR')
    ]

    for name, pattern in os_patterns:
        if re.search(pattern, user_agent):
            os_info = name
            break

    for name, pattern in browser_patterns:
        if re.search(pattern, user_agent):
            browser = name
            break

    device = "–°–º–∞—Ä—Ç—Ñ–æ–Ω/–ü–ª–∞–Ω—à–µ—Ç" if any(x in user_agent for x in ['Mobile', 'Android', 'iPhone']) else "–ö–æ–º–ø—å—é—Ç–µ—Ä"

    return os_info, browser, device

def log_data(data):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with open(LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(json.dumps(data, ensure_ascii=False) + '\n')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

def delete_user_data(ip):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not os.path.exists(LOG_FILE):
            return False

        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            lines = [line for line in f if json.loads(line).get('ip') != ip]

        with open(LOG_FILE, 'w', encoding='utf-8') as f:
            f.writelines(lines)

        return True
    except Exception:
        return False

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</title>
    <style>
        body {
            background-color: #111;
            color: #0f0;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        .container {
            background: rgba(0,0,0,0.7);
            border-radius: 10px;
            padding: 20px;
            margin: 0 auto;
            max-width: 800px;
        }
        .info-block {
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #333;
        }
        #cookieConsent {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: #222;
            color: white;
            padding: 15px;
            text-align: center;
            z-index: 1000;
        }
        button {
            padding: 10px 20px;
            margin: 0 10px;
            border-radius: 5px;
            cursor: pointer;
        }
        .allow {
            background: #4CAF50;
            color: white;
            border: none;
        }
        .deny {
            background: #f44336;
            color: white;
            border: none;
        }
        #map {
            height: 300px;
            width: 100%;
            margin-top: 15px;
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <div id="mainContent" class="container" style="display:none;">
        <div class="info-block">
            <h2>üåç –°–µ—Ç—å –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h2>
            <p><strong>IP:</strong> <span id="ipField">{{ ip }}</span></p>
            <p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> <span id="countryField">{{ country }}</span></p>
            <p><strong>–ì–æ—Ä–æ–¥:</strong> <span id="cityField">{{ city }}</span></p>
            <p><strong>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</strong> <span id="ispField">{{ isp }}</span></p>
            <div id="gpsData" style="display:none;">
                <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> <span id="coordinates"></span></p>
                <p><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> <span id="accuracy"></span></p>
                <div id="map"></div>
            </div>
        </div>

        <div class="info-block">
            <h2>üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <p><strong>–û–°:</strong> <span id="osField">{{ os }}</span></p>
            <p><strong>–ë—Ä–∞—É–∑–µ—Ä:</strong> <span id="browserField">{{ browser }}</span></p>
            <p><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> <span id="deviceField">{{ device }}</span></p>
            <p><strong>–Ø–¥—Ä–∞ CPU:</strong> <span id="cpuCores"></span></p>
            <p><strong>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞:</strong> <span id="screenRes"></span></p>
        </div>

        <div class="info-block">
            <h2>üîå –°–µ—Ç–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>
            <p><strong>–õ–æ–∫–∞–ª—å–Ω—ã–π IP:</strong> <span id="localIp"></span></p>
            <p><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã:</strong> <span id="fonts"></span></p>
        </div>

        <div style="color:#f55;margin-top:20px;">
            <h3>‚ö†Ô∏è –≠—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–∏–º–µ—Ä</h3>
            <p>–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª–∏ –∂–µ—Ä—Ç–≤–æ–π —É—á–µ–±–Ω–æ–π —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π –∞—Ç–∞–∫–∏.</p>
            <button onclick="deleteMyData()" class="deny">–£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ</button>
        </div>
    </div>

    <div id="cookieConsent">
        <h3>üç™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Cookies</h3>
        <p>–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏.</p>
        <button class="allow" onclick="accept()">–†–∞–∑—Ä–µ—à–∏—Ç—å</button>
        <button class="deny" onclick="reject()">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
    </div>

    <script>
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ cookies
        function checkConsent() {
            return document.cookie.includes("{{ COOKIE_NAME }}=true");
        }

        // –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
        function accept() {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
            document.cookie = "{{ COOKIE_NAME }}=true; max-age=31536000; path=/";
            document.getElementById('cookieConsent').style.display = 'none';
            document.getElementById('mainContent').style.display = 'block';
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(
                    position => {
                        const coords = position.coords;
                        document.getElementById('coordinates').textContent = 
                            coords.latitude.toFixed(6) + ", " + coords.longitude.toFixed(6);
                        document.getElementById('accuracy').textContent = "¬±" + Math.round(coords.accuracy) + " –º–µ—Ç—Ä–æ–≤";
                        document.getElementById('gpsData').style.display = 'block';
                        
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                        fetch('/log_gps', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({
                                lat: coords.latitude,
                                lon: coords.longitude,
                                acc: coords.accuracy
                            })
                        });
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
                        showMap(coords.latitude, coords.longitude);
                    },
                    error => {
                        console.error("–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
                    },
                    {enableHighAccuracy: true, timeout: 10000}
                );
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            loadDeviceInfo();
        }

        // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
        function reject() {
            alert("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
            document.getElementById('cookieConsent').style.display = 'none';
            document.getElementById('mainContent').style.display = 'block';
            loadBasicInfo();
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É
        function showMap(lat, lon) {
            const map = document.getElementById('map');
            map.innerHTML = `
                <iframe width="100%" height="100%" frameborder="0" scrolling="no" marginheight="0" marginwidth="0"
                    src="https://www.openstreetmap.org/export/embed.html?bbox=${lon-0.01}%2C${lat-0.01}%2C${lon+0.01}%2C${lat+0.01}&amp;layer=mapnik&amp;marker=${lat}%2C${lon}">
                </iframe>`;
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        function loadDeviceInfo() {
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
            document.getElementById('cpuCores').textContent = navigator.hardwareConcurrency || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            
            // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            document.getElementById('screenRes').textContent = 
                window.screen.width + "√ó" + window.screen.height;
            
            // –õ–æ–∫–∞–ª—å–Ω—ã–π IP —á–µ—Ä–µ–∑ WebRTC
            getLocalIP();
            
            // –î–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            getFonts();
        }

        // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏)
        function loadBasicInfo() {
            document.getElementById('cpuCores').textContent = "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–∏–µ";
            document.getElementById('screenRes').textContent = 
                window.screen.width + "√ó" + window.screen.height;
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
        function getLocalIP() {
            try {
                const rtc = new RTCPeerConnection({iceServers: []});
                rtc.createDataChannel("");
                rtc.onicecandidate = e => {
                    if (e.candidate) {
                        const ip = e.candidate.candidate.match(/([0-9]{1,3}(\.[0-9]{1,3}){3})/);
                        if (ip) {
                            document.getElementById('localIp').textContent = ip[1];
                            rtc.close();
                        }
                    }
                };
                rtc.createOffer().then(offer => rtc.setLocalDescription(offer));
            } catch (e) {
                console.error("WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:", e);
                document.getElementById('localIp').textContent = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        function getFonts() {
            const fonts = ["Arial", "Times New Roman", "Courier New", "Verdana", "Georgia"];
            const available = [];
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");
            
            fonts.forEach(font => {
                ctx.font = `12px "${font}"`;
                if (ctx.measureText("test").width > 0) available.push(font);
            });
            
            document.getElementById('fonts').textContent = available.join(", ") || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function deleteMyData() {
            fetch('/delete_data', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    alert(data.success ? "–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!" : "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
                })
                .catch(e => {
                    console.error("–û—à–∏–±–∫–∞:", e);
                    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
                });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (checkConsent()) {
            document.getElementById('cookieConsent').style.display = 'none';
            document.getElementById('mainContent').style.display = 'block';
            loadDeviceInfo();
        }
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP
        ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        ip = ip.split(',')[0].strip() if ip else request.remote_addr
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_agent = request.headers.get('User-Agent', '')
        geo = get_ip_data(ip) or {}
        os_info, browser, device = parse_user_agent(user_agent)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        log_data({
            "time": datetime.now().isoformat(),
            "ip": ip,
            "user_agent": user_agent,
            "os": os_info,
            "browser": browser,
            "device": device,
            "geo": geo
        })

        # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return render_template_string(
            HTML_TEMPLATE,
            COOKIE_NAME=COOKIE_NAME,
            ip=ip,
            country=geo.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            city=geo.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            isp=geo.get('org', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            os=os_info,
            browser=browser,
            device=device
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ index: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", 500

@app.route('/log_gps', methods=['POST'])
def log_gps():
    try:
        data = request.json
        ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        ip = ip.split(',')[0].strip() if ip else request.remote_addr
        
        log_data({
            "time": datetime.now().isoformat(),
            "ip": ip,
            "gps": data
        })
        
        return {"status": "success"}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ log_gps: {e}")
        return {"status": "error"}, 500

@app.route('/delete_data', methods=['POST'])
def delete_data():
    try:
        ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        ip = ip.split(',')[0].strip() if ip else request.remote_addr
        
        return {"success": delete_user_data(ip)}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_data: {e}")
        return {"success": False}, 500

if __name__ == '__main__':
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        init_log_file()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.run(host='0.0.0.0', port=5000, debug=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
