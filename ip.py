from flask import Flask, request, render_template_string
import requests
from datetime import datetime
import re

app = Flask(__name__)

# –ö—ç—à –¥–ª—è IP-–¥–∞–Ω–Ω—ã—Ö
ip_cache = {}

def get_ip_data(ip):
    if ip in ip_cache:
        return ip_cache[ip]

    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json", timeout=5)
        geo = response.json()
        data = {
            "country": geo.get("country", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "city": geo.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "isp": geo.get("org", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        }
        ip_cache[ip] = data
        return data
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ IPAPI]: {e}")
        return {"country": "–û—à–∏–±–∫–∞", "city": "–û—à–∏–±–∫–∞", "isp": "–û—à–∏–±–∫–∞"}

def parse_user_agent(user_agent):
    # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è Windows 11
    os_patterns = [
        (r'Windows 11', 'Windows 11'),
        (r'Windows NT 10.0', 'Windows 10/11'),
        (r'Linux x86_64', 'Linux (PC)'),
        (r'Linux armv8l', 'Linux (Android)'),
        (r'Android', 'Android'),
        (r'iPhone|iPad|iPod', 'iOS'),
        (r'Mac OS X', 'macOS')
    ]

    browser_patterns = [
        (r'Edg', 'Microsoft Edge'),
        (r'Chrome', 'Google Chrome'),
        (r'Firefox', 'Mozilla Firefox'),
        (r'Safari', 'Safari')
    ]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
    os = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    for pattern, name in os_patterns.items():
        if re.search(pattern, user_agent):
            os = name
            break

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Windows 11
    if os == "Windows 10/11":
        if "Win64; x64" in user_agent and "Trident/7.0" not in user_agent:
            os = "Windows 11"
        else:
            os = "Windows 10"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    for pattern, name in browser_patterns.items():
        if re.search(pattern, user_agent):
            browser = name
            break

    # –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if 'Mobile' in user_agent or 'Android' in user_agent or 'iPhone' in user_agent:
        device = "–°–º–∞—Ä—Ç—Ñ–æ–Ω/–ü–ª–∞–Ω—à–µ—Ç"
    else:
        device = "–ü–ö"

    return os, browser, device

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</title>
    <style>
        body { background-color: #111; color: #00FF88; font-family: Arial; margin: 0; padding: 20px; }
        .container { background-color: rgba(0, 0, 0, 0.7); border-radius: 10px; padding: 20px; box-shadow: 0 0 20px rgba(0, 255, 136, 0.6); max-width: 800px; margin: 0 auto; }
        h1 { text-align: center; }
        .info-block { margin: 15px 0; padding: 10px; border-bottom: 1px solid #333; }
        .warning { color: #FF5555; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</h1>
        
        <div class="info-block">
            <h2>üåç –°–µ—Ç—å –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h2>
            <p><strong>IP:</strong> {{ ip }}</p>
            <p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> {{ country }}</p>
            <p><strong>–ì–æ—Ä–æ–¥:</strong> {{ city }}</p>
            <p><strong>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</strong> {{ isp }}</p>
        </div>

        <div class="info-block">
            <h2>üíª –°–∏—Å—Ç–µ–º–∞</h2>
            <p><strong>–û–°:</strong> <span id="os">{{ os }}</span></p>
            <p><strong>–ë—Ä–∞—É–∑–µ—Ä:</strong> <span id="browser">{{ browser }}</span></p>
            <p><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> <span id="device">{{ device }}</span></p>
            <p><strong>–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã:</strong> <span id="cpuCores"></span> <span id="cpuWarning" class="warning"></span></p>
            <p><strong>GPU:</strong> <span id="gpu"></span></p>
        </div>

        <div class="info-block">
            <h2>üñ•Ô∏è –≠–∫—Ä–∞–Ω</h2>
            <p><strong>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</strong> <span id="screenResolution"></span></p>
            <p><strong>–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞:</strong> <span id="colorDepth"></span></p>
        </div>

        <div class="info-block">
            <h2>üîã –ë–∞—Ç–∞—Ä–µ—è</h2>
            <p><strong>–ó–∞—Ä—è–¥:</strong> <span id="batteryLevel"></span> <span id="batteryWarning" class="warning"></span></p>
            <p><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> <span id="batteryCharging"></span></p>
        </div>

        <div class="info-block">
            <h2>üîå WebRTC (–ª–æ–∫–∞–ª—å–Ω—ã–π IP)</h2>
            <p><strong>–õ–æ–∫–∞–ª—å–Ω—ã–π IP:</strong> <span id="webrtcIp">–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...</span></p>
        </div>

        <div class="info-block">
            <h2>üñãÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã</h2>
            <p><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã:</strong> <span id="installedFonts">–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...</span></p>
        </div>

        <div class="info-block">
            <h2>üñêÔ∏è –¶–∏—Ñ—Ä–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫</h2>
            <p><strong>Canvas Fingerprint:</strong> <span id="fingerprint"></span></p>
        </div>
    </div>

    <script>
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        function getCPUInfo() {
            const cores = navigator.hardwareConcurrency;
            let warning = "";
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if (/Android|iPhone|iPad/i.test(navigator.userAgent)) {
                warning = " (–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç–µ—Ä—ã)";
            }
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö CPU
            else if (cores >= 8) {
                warning = " (–≤–æ–∑–º–æ–∂–Ω–æ, —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Performance-—è–¥—Ä–∞)";
            }
            
            document.getElementById('cpuCores').textContent = cores || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            document.getElementById('cpuWarning').textContent = warning;
        }

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GPU
        function getGPUInfo() {
            if (navigator.gpu) {
                navigator.gpu.requestAdapter()
                    .then(adapter => {
                        const info = adapter.info || {};
                        document.getElementById('gpu').textContent = 
                            info.description || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                    })
                    .catch(() => {
                        document.getElementById('gpu').textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å";
                    });
            } else {
                document.getElementById('gpu').textContent = "API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è";
            }
        }

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏
        function getBatteryInfo() {
            if ('getBattery' in navigator) {
                navigator.getBattery()
                    .then(battery => {
                        document.getElementById('batteryLevel').textContent = 
                            Math.round(battery.level * 100) + "%";
                        document.getElementById('batteryCharging').textContent = 
                            battery.charging ? "–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è" : "–ù–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è";
                    })
                    .catch(() => {
                        showBatteryWarning();
                    });
            } else {
                showBatteryWarning();
            }
        }

        function showBatteryWarning() {
            document.getElementById('batteryLevel').textContent = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
            document.getElementById('batteryWarning').textContent = 
                " (—Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)";
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
        window.onload = function() {
            // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            getCPUInfo();
            getGPUInfo();
            document.getElementById('screenResolution').textContent = 
                window.screen.width + "x" + window.screen.height;
            document.getElementById('colorDepth').textContent = 
                window.screen.colorDepth + " –±–∏—Ç";

            // –ë–∞—Ç–∞—Ä–µ—è
            getBatteryInfo();

            // WebRTC IP
            const rtc = new RTCPeerConnection({ 
                iceServers: [{ urls: "stun:stun.l.google.com:19302" }] 
            });
            rtc.createDataChannel("");
            rtc.onicecandidate = e => {
                if (e.candidate) {
                    const ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3})/;
                    const ipMatch = e.candidate.candidate.match(ipRegex);
                    if (ipMatch) {
                        document.getElementById('webrtcIp').textContent = ipMatch[1];
                        rtc.close();
                    }
                }
            };
            rtc.createOffer().then(offer => rtc.setLocalDescription(offer));

            // –®—Ä–∏—Ñ—Ç—ã
            const fonts = ["Arial", "Times New Roman", "Courier New", "Verdana", "Georgia"];
            const availableFonts = [];
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            
            fonts.forEach(font => {
                context.font = `12px "${font}"`;
                if (context.measureText("test").width > 0) availableFonts.push(font);
            });
            document.getElementById('installedFonts').textContent = 
                availableFonts.join(", ") || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

            // Canvas Fingerprinting
            const fingerprintCanvas = document.createElement("canvas");
            const fingerprintCtx = fingerprintCanvas.getContext("2d");
            fingerprintCtx.fillStyle = "rgb(128, 0, 128)";
            fingerprintCtx.fillRect(0, 0, 100, 50);
            fingerprintCtx.fillStyle = "rgb(255, 255, 0)";
            fingerprintCtx.font = "18px Arial";
            fingerprintCtx.fillText("Fingerprint", 10, 30);
            document.getElementById('fingerprint').textContent = 
                fingerprintCanvas.toDataURL().slice(-32);
        };
    </script>
</body>
</html>
"""

@app.route('/')
def show_ip():
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    user_agent = request.headers.get('User-Agent', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    os, browser, device = parse_user_agent(user_agent)
    geo = get_ip_data(ip)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    log_entry = f"""
=== –ù–æ–≤—ã–π –≤—Ö–æ–¥ ===
–í—Ä–µ–º—è: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
IP: {ip}
–°—Ç—Ä–∞–Ω–∞: {geo['country']}
–ì–æ—Ä–æ–¥: {geo['city']}
–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {geo['isp']}
–û–°: {os}
–ë—Ä–∞—É–∑–µ—Ä: {browser}
–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}
User-Agent: {user_agent}
------------------------------------
"""
    with open("ips.log", "a", encoding="utf-8") as f:
        f.write(log_entry)
    
    return render_template_string(HTML_TEMPLATE,
                                ip=ip,
                                country=geo['country'],
                                city=geo['city'],
                                isp=geo['isp'],
                                os=os,
                                browser=browser,
                                device=device)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5050)
